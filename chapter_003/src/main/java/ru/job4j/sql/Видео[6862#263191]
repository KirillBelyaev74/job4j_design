--1. Создать таблицы и заполнить их начальными данными
create table departments (
    id serial primary key,
    name varchar(20));

create table employees (
    id serial primary key,
    name varchar(20),
    departments_id smallint references departments(id));

insert into departments (name) values ('Administration');
insert into departments (name) values ('Marketing');
insert into departments (name) values ('Finance');
insert into departments (name) values ('IT');
insert into departments (name) values ('Operations');

insert into employees (name, departments_id) VALUES ('Steven', 1);
insert into employees (name, departments_id) VALUES ('Lex', 2);
insert into employees (name, departments_id) VALUES ('Bruce', 3);
insert into employees (name, departments_id) VALUES ('David', 4);
insert into employees (name) VALUES ('Diana	');

--2. Выполнить запросы с left, right, full, cross соединениями
select e.name employees, d.name departments from employees as e
left join departments as d on e.departments_id = d.id order by d.name;

select e.name employees, d.name departments from employees as e
right join departments as d on e.departments_id = d.id order by d.name;

select e.name employees, d.name departments from employees as e
full join departments as d on e.departments_id = d.id order by d.name;

--3. Используя left join найти работников, которые не относятся ни к одну из департаментов
select e.name employees, d.name departments
from employees as e left join departments as d on e.departments_id = d.id
where e.departments_id is null order by d.name;

--4. Используя left и right join написать запросы, которые давали бы одинаковый результат.
select e.name employees, d.name departments
from employees as e left join departments as d on e.departments_id = d.id
where e.departments_id is not null order by d.name;

select e.name employees, d.name departments
from employees as e right join departments as d on e.departments_id = d.id
where e.departments_id is not null order by d.name;

--5. Создать таблицу teens с атрибутами name, gender и заполнить ее. Используя cross join составить все возможные разнополые пары
create table teens (
    id serial primary key,
    name varchar(10),
    gender varchar(1));

insert into teens (name, gender) VALUES ('Steven', 'm');
insert into teens (name, gender) VALUES ('Neena', 'w');
insert into teens (name, gender) VALUES ('Bruce', 'm');
insert into teens (name, gender) VALUES ('Diana', 'w');

select t1.name , t1.gender, t2.name, t2.gender from teens as t1 cross join teens as t2;